<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1669px" preserveAspectRatio="none" style="width:1341px;height:1669px;" version="1.1" viewBox="0 0 1341 1669" width="1341px" zoomAndPan="magnify"><defs><filter height="300%" id="fqi3z7d7onf0w" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="#FFFFFF" filter="url(#fqi3z7d7onf0w)" height="109.2861" style="stroke: #000000; stroke-width: 2.0;" width="417" x="806" y="1423.8398"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="425" x2="425" y1="41.1201" y2="1626.6348"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="668" x2="668" y1="41.1201" y2="1626.6348"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="902" x2="902" y1="41.1201" y2="1626.6348"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="1119" x2="1119" y1="41.1201" y2="1626.6348"/><rect fill="#FEFECE" filter="url(#fqi3z7d7onf0w)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="240" x="303" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="226" x="310" y="26.0439">AnnotationConfigApplicationContext</text><rect fill="#FEFECE" filter="url(#fqi3z7d7onf0w)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="240" x="303" y="1625.6348"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="226" x="310" y="1648.6787">AnnotationConfigApplicationContext</text><rect fill="#FEFECE" filter="url(#fqi3z7d7onf0w)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="218" x="557" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="204" x="564" y="26.0439">AnnotatedBeanDefinitionReader</text><rect fill="#FEFECE" filter="url(#fqi3z7d7onf0w)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="218" x="557" y="1625.6348"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="204" x="564" y="1648.6787">AnnotatedBeanDefinitionReader</text><rect fill="#FEFECE" filter="url(#fqi3z7d7onf0w)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="223" x="789" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="209" x="796" y="26.0439">ClassPathBeanDefinitionScanner</text><rect fill="#FEFECE" filter="url(#fqi3z7d7onf0w)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="223" x="789" y="1625.6348"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="209" x="796" y="1648.6787">ClassPathBeanDefinitionScanner</text><rect fill="#FEFECE" filter="url(#fqi3z7d7onf0w)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="183" x="1026" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="169" x="1033" y="26.0439">AbstractApplicationContext</text><rect fill="#FEFECE" filter="url(#fqi3z7d7onf0w)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="183" x="1026" y="1625.6348"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="169" x="1033" y="1648.6787">AbstractApplicationContext</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="425" x2="467" y1="74.8745" y2="74.8745"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="467" x2="467" y1="74.8745" y2="87.8745"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="426" x2="467" y1="87.8745" y2="87.8745"/><polygon fill="#A80036" points="436,83.8745,426,87.8745,436,91.8745,432,87.8745" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="432" y="70.0181">new</text><polygon fill="#A80036" points="656,115.6289,666,119.6289,656,123.6289,660,119.6289" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="425" x2="662" y1="119.6289" y2="119.6289"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="432" y="114.7725">new</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="668" x2="710" y1="194.2693" y2="194.2693"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="710" x2="710" y1="194.2693" y2="207.2693"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="669" x2="710" y1="207.2693" y2="207.2693"/><polygon fill="#A80036" points="679,203.2693,669,207.2693,679,211.2693,675,207.2693" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="207" x="675" y="189.4128">registerAnnotationConfigProcessors</text><path d="M235,132.6289 L235,248.6289 L659,248.6289 L659,142.6289 L649,132.6289 L235,132.6289 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M649,132.6289 L649,142.6289 L659,142.6289 L649,132.6289 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="241" x="241" y="152.5269">这里添加一下 BeanPostProcessor 的扩展</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="391" x="241" y="170.2813">调用的是 AnnotationConfigUtils.registerAnnotationConfigProcessors</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="104" x="241" y="188.0356">其中重点的内容是</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="209" x="241" y="205.79">1. ConfigurationClassPostProcessor</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="250" x="241" y="223.5444">2. AutowiredAnnotationBeanPostProcessor</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="244" x="241" y="241.2988">3. RequiredAnnotationBeanPostProcessor</text><polygon fill="#A80036" points="436,277.9097,426,281.9097,436,285.9097,432,281.9097" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="430" x2="667" y1="281.9097" y2="281.9097"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="33" x="442" y="277.0532">return</text><polygon fill="#A80036" points="890.5,309.6641,900.5,313.6641,890.5,317.6641,894.5,313.6641" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="425" x2="896.5" y1="313.6641" y2="313.6641"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="432" y="308.8076">new</text><polygon fill="#A80036" points="436,341.4185,426,345.4185,436,349.4185,432,345.4185" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="430" x2="901.5" y1="345.4185" y2="345.4185"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="33" x="442" y="340.562">return</text><polygon fill="#A80036" points="656,387.05,666,391.05,656,395.05,660,391.05" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="425" x2="662" y1="391.05" y2="391.05"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="432" y="386.1936">register</text><path d="M88,358.4185 L88,403.4185 L416,403.4185 L416,368.4185 L406,358.4185 L88,358.4185 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M406,358.4185 L406,368.4185 L416,368.4185 L406,358.4185 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="307" x="94" y="378.3164">这里 register 注册的第一个 BeanDefinition，作为参数</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="265" x="94" y="396.0708">也就是标记了 @Configuration 注解启动配置类</text><polygon fill="#A80036" points="436,432.6816,426,436.6816,436,440.6816,432,436.6816" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="430" x2="667" y1="436.6816" y2="436.6816"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="126" x="442" y="431.8252">registerBeanDefinition</text><polygon fill="#A80036" points="1107.5,469.436,1117.5,473.436,1107.5,477.436,1111.5,473.436" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="425" x2="1113.5" y1="473.436" y2="473.436"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="39" x="432" y="468.5796">refresh</text><path d="M119,449.6816 L119,476.6816 L416,476.6816 L416,459.6816 L406,449.6816 L119,449.6816 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M406,449.6816 L406,459.6816 L416,459.6816 L406,449.6816 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="276" x="125" y="469.5796">refresh 是 spring ioc 容器的启动方法，老复杂了</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="510.1904" y2="510.1904"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="510.1904" y2="523.1904"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="523.1904" y2="523.1904"/><polygon fill="#A80036" points="1130.5,519.1904,1120.5,523.1904,1130.5,527.1904,1126.5,523.1904" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="87" x="1126.5" y="505.334">prepareRefresh</text><path d="M773,492.936 L773,519.936 L1110,519.936 L1110,502.936 L1100,492.936 L773,492.936 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,492.936 L1100,502.936 L1110,502.936 L1100,492.936 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="316" x="779" y="512.834">准备启动阶段，记录启动时间，准备 properties 和 验证</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="580.0764" y2="580.0764"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="580.0764" y2="593.0764"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="593.0764" y2="593.0764"/><polygon fill="#A80036" points="1130.5,589.0764,1120.5,593.0764,1130.5,597.0764,1126.5,593.0764" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="142" x="1126.5" y="575.22">obtainFreshBeanFactory</text><path d="M463,536.1904 L463,617.1904 L1110,617.1904 L1110,546.1904 L1100,536.1904 L463,536.1904 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,536.1904 L1100,546.1904 L1110,546.1904 L1100,536.1904 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="436" x="469" y="556.0884">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="626" x="469" y="573.8428">获取 beanFactory  通常是 DefaultListableBeanFactory 实例，在 注解配置 和 xml 配置中的实现稍微有些不同</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="319" x="469" y="591.5972">不同总的来说就是获取一个 DefaultListableBeanFactory</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="365" x="469" y="609.3516">注解里面还是直接返回，xml里面销毁里面的 bean，重新构建的</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="719.48" y2="719.48"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="719.48" y2="732.48"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="732.48" y2="732.48"/><polygon fill="#A80036" points="1130.5,728.48,1120.5,732.48,1130.5,736.48,1126.5,732.48" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="117" x="1126.5" y="714.6235">prepareBeanFactory</text><path d="M329,631.208 L329,800.208 L1110,800.208 L1110,641.208 L1100,631.208 L329,631.208 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,631.208 L1100,641.208 L1110,641.208 L1100,631.208 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="201" x="335" y="651.106">prepareBeanFactory(beanFactory);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="262" x="335" y="668.8604">准备阶段，就是对 beanFactory 进行一些配置</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="93" x="335" y="686.6147">1. 设置类加载器</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="230" x="335" y="704.3691">2. 设置beanFactory的表达式语言处理器</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="285" x="335" y="722.1235">3. 为beanFactory增加了一个默认的propertyEditor</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="622" x="335" y="739.8779">4. 添加一个 ApplicationContextAwareProcessor 这是一个 BeaPostProcessor 实现用来实现一些 Aware 接口</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="474" x="335" y="757.6323">5. 添加忽略依赖的接口，就是 ApplicationContextAwareProcessor 里面处理的接口</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="756" x="335" y="775.3867">6. 这里添加处理依赖时候的映射 也就是如果应用依赖了譬如 BeanFactory，ApplicationContext 等接口，都是同一个实例（本实例）</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="339" y="793.1411"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="833.752" y2="833.752"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="833.752" y2="846.752"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="846.752" y2="846.752"/><polygon fill="#A80036" points="1130.5,842.752,1120.5,846.752,1130.5,850.752,1126.5,846.752" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="147" x="1126.5" y="828.8955">postProcessBeanFactory</text><path d="M580,816.4976 L580,843.4976 L1110,843.4976 L1110,826.4976 L1100,816.4976 L580,816.4976 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,816.4976 L1100,826.4976 L1110,826.4976 L1100,816.4976 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="509" x="586" y="836.3955">准备完毕后的一个方法，子类可以对 beanFactory 继续做一些修改，本类中是一个空方法</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="939.1467" y2="939.1467"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="939.1467" y2="952.1467"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="952.1467" y2="952.1467"/><polygon fill="#A80036" points="1130.5,948.1467,1120.5,952.1467,1130.5,956.1467,1126.5,952.1467" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="203" x="1126.5" y="934.2903">invokeBeanFactoryPostProcessors</text><path d="M8,859.752 L8,1011.752 L1111,1011.752 L1111,869.752 L1101,859.752 L8,859.752 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1101,859.752 L1101,869.752 L1111,869.752 L1101,859.752 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="675" x="14" y="879.6499">这是一个重要的地方，对应扩展接口为 BeanFactoryPostProcessor 以及子接口 BeanDefinitionRegistryPostProcessor</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="668" x="14" y="897.4043">BeanFactoryPostProcessor 接口是可以针对 beanFactory 做一些修改，譬如添加一些 bean，设置 beanFactory 属性</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="664" x="14" y="915.1587">BeanDefinitionRegistryPostProcessor 接口只是方法参数为 BeanDefinitionRegistry，可以再添加一些 BeanDefinition</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="511" x="14" y="932.9131">这个接口是一个重要的扩展接口，spring 内部 或者外部都可以通过这个接口的实现来扩展</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="717" x="14" y="950.6675">可以通过 ApplicationContext 的 addBeanFactoryPostProcessor 方法添加，或者注册 Bean，spring 就可以感知到，进行触发</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="569" x="14" y="968.4219">发生顺序很重要，先调用通过 applicationContext.add 添加的，然后调用 BeanDefinition 容器里面的</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="869" x="14" y="986.1763">spring 内部的第一个调用的容器中的定义就是 ConfigurationClassPostProcessor，这个用了根据 配置类来找各个地方的 BeanDefinition ，注册到 容器中</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="1082" x="14" y="1003.9307">无论xml配置还是注解配置，通常有一个入口配置（springboot 中通常就是 Application），然后根据这个配置类，找到其他的配置类，根据所有配置类（找到一个解析一个）找到定义的 bean</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1069.6731" y2="1069.6731"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1069.6731" y2="1082.6731"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1082.6731" y2="1082.6731"/><polygon fill="#A80036" points="1130.5,1078.6731,1120.5,1082.6731,1130.5,1086.6731,1126.5,1082.6731" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="166" x="1126.5" y="1064.8167">registerBeanPostProcessors</text><path d="M353,1025.7871 L353,1106.7871 L1110,1106.7871 L1110,1035.7871 L1100,1025.7871 L353,1025.7871 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1025.7871 L1100,1035.7871 L1110,1035.7871 L1100,1025.7871 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="429" x="359" y="1045.6851">经过上一步调用后，所有的 BeanDefinition 都已经找到并且注册到容器中类</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="551" x="359" y="1063.4395">这一步就是找到容器中实现 BeanPostProcessor 的 BeanDefinition，然后添加到 beanFactory 中</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="736" x="359" y="1081.1938">BeanPostProcessor 这个也是一个非常重要的扩展接口，譬如spring内部各种 Aware 接口，就是有 这个接口的实现类扩展出来的</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="207" x="359" y="1098.9482">aop 也是这一系列子接口实现的扩展</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1139.5591" y2="1139.5591"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1139.5591" y2="1152.5591"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1152.5591" y2="1152.5591"/><polygon fill="#A80036" points="1130.5,1148.5591,1120.5,1152.5591,1130.5,1156.5591,1126.5,1152.5591" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="111" x="1126.5" y="1134.7026">initMessageSource</text><path d="M662,1122.3047 L662,1149.3047 L1110,1149.3047 L1110,1132.3047 L1100,1122.3047 L662,1122.3047 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1122.3047 L1100,1132.3047 L1110,1132.3047 L1100,1122.3047 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="427" x="668" y="1142.2026">初始化 MessageSource 接口，如果没有，就使用默认的，注册到容器里面</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1184.3135" y2="1184.3135"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1184.3135" y2="1197.3135"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1197.3135" y2="1197.3135"/><polygon fill="#A80036" points="1130.5,1193.3135,1120.5,1197.3135,1130.5,1201.3135,1126.5,1197.3135" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="177" x="1126.5" y="1179.457">initApplicationEventMulticaster</text><path d="M596,1167.0591 L596,1194.0591 L1110,1194.0591 L1110,1177.0591 L1100,1167.0591 L596,1167.0591 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1167.0591 L1100,1177.0591 L1110,1177.0591 L1100,1167.0591 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="493" x="602" y="1186.957">初始化 ApplicationEventMulticaster 接口，如果没有，就使用默认的，注册到容器里面</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1229.0679" y2="1229.0679"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1229.0679" y2="1242.0679"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1242.0679" y2="1242.0679"/><polygon fill="#A80036" points="1130.5,1238.0679,1120.5,1242.0679,1130.5,1246.0679,1126.5,1242.0679" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="1126.5" y="1224.2114">onRefresh</text><path d="M689,1211.8135 L689,1238.8135 L1110,1238.8135 L1110,1221.8135 L1100,1211.8135 L689,1211.8135 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1211.8135 L1100,1221.8135 L1110,1221.8135 L1100,1211.8135 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="400" x="695" y="1231.7114">这是一个空方法，子类可以实现，可以在 bean 容器里面添加一些东西</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1273.8223" y2="1273.8223"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1273.8223" y2="1286.8223"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1286.8223" y2="1286.8223"/><polygon fill="#A80036" points="1130.5,1282.8223,1120.5,1286.8223,1130.5,1290.8223,1126.5,1286.8223" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="96" x="1126.5" y="1268.9658">registerListeners</text><path d="M414,1256.5679 L414,1283.5679 L1110,1283.5679 L1110,1266.5679 L1100,1256.5679 L414,1256.5679 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1256.5679 L1100,1266.5679 L1110,1266.5679 L1100,1256.5679 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="675" x="420" y="1276.4658">这里是注册 ApplicationListener ，一些是通过 beanFactory 注册的，一些是用户自定义的 Bean ，然后发布 early 事件</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1334.8311" y2="1334.8311"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1334.8311" y2="1347.8311"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1347.8311" y2="1347.8311"/><polygon fill="#A80036" points="1130.5,1343.8311,1120.5,1347.8311,1130.5,1351.8311,1126.5,1347.8311" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="172" x="1126.5" y="1329.9746">finishBeanFactoryInitialization</text><path d="M797,1299.8223 L797,1362.8223 L1110,1362.8223 L1110,1309.8223 L1100,1299.8223 L797,1299.8223 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1299.8223 L1100,1309.8223 L1110,1309.8223 L1100,1299.8223 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="292" x="803" y="1319.7202">这个方法里面将实例化所有非延时加载的单例 bean</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="173" x="803" y="1337.4746">实例化就是调用 getBean 方法</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="185" x="803" y="1355.229">这里将触发 BeanPostProcessor</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1395.8398" y2="1395.8398"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1395.8398" y2="1408.8398"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1408.8398" y2="1408.8398"/><polygon fill="#A80036" points="1130.5,1404.8398,1120.5,1408.8398,1130.5,1412.8398,1126.5,1408.8398" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="74" x="1126.5" y="1390.9834">finishRefresh</text><path d="M455,1378.5854 L455,1405.5854 L1110,1405.5854 L1110,1388.5854 L1100,1378.5854 L455,1378.5854 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1378.5854 L1100,1388.5854 L1110,1388.5854 L1100,1378.5854 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="634" x="461" y="1398.4834">清空 resource缓存，注册生命周期处理bean，然后获取所有 周期接口的实现启动，发布启动事件，注册到 JMX</text><path d="M806,1423.8398 L867,1423.8398 L867,1432.8398 L857,1442.8398 L806,1442.8398 L806,1423.8398 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="109.2861" style="stroke: #000000; stroke-width: 2.0;" width="417" x="806" y="1423.8398"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="16" x="821" y="1439.7378">alt</text><text fill="#000000" font-family="sans-serif" font-size="11" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="72" x="882" y="1438.4458">[if exception]</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1467.3716" y2="1467.3716"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1467.3716" y2="1480.3716"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1480.3716" y2="1480.3716"/><polygon fill="#A80036" points="1130.5,1476.3716,1120.5,1480.3716,1130.5,1484.3716,1126.5,1480.3716" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="80" x="1126.5" y="1462.5151">destroyBeans</text><path d="M816,1450.1172 L816,1477.1172 L1110,1477.1172 L1110,1460.1172 L1100,1450.1172 L816,1450.1172 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1450.1172 L1100,1460.1172 L1110,1460.1172 L1100,1450.1172 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="273" x="822" y="1470.0151">如果启动出现异常，就销毁所有已经创建的实例</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1512.126" y2="1512.126"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1512.126" y2="1525.126"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1525.126" y2="1525.126"/><polygon fill="#A80036" points="1130.5,1521.126,1120.5,1525.126,1130.5,1529.126,1126.5,1525.126" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="82" x="1126.5" y="1507.2695">cancelRefresh</text><path d="M1024,1494.8716 L1024,1521.8716 L1110,1521.8716 L1110,1504.8716 L1100,1494.8716 L1024,1494.8716 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1494.8716 L1100,1504.8716 L1110,1504.8716 L1100,1494.8716 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="65" x="1030" y="1514.7695">取消refresh</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1119.5" x2="1161.5" y1="1563.8804" y2="1563.8804"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1161.5" x2="1161.5" y1="1563.8804" y2="1576.8804"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1120.5" x2="1161.5" y1="1576.8804" y2="1576.8804"/><polygon fill="#A80036" points="1130.5,1572.8804,1120.5,1576.8804,1130.5,1580.8804,1126.5,1576.8804" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="125" x="1126.5" y="1559.0239">resetCommonCaches</text><path d="M946,1546.626 L946,1573.626 L1110,1573.626 L1110,1556.626 L1100,1546.626 L946,1546.626 " fill="#FBFB77" filter="url(#fqi3z7d7onf0w)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100,1546.626 L1100,1556.626 L1110,1556.626 L1100,1546.626 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="143" x="952" y="1566.5239">最后一步，清空所有缓存</text><polygon fill="#A80036" points="436,1604.6348,426,1608.6348,436,1612.6348,432,1608.6348" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="430" x2="1118.5" y1="1608.6348" y2="1608.6348"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="21" x="442" y="1603.7783">end</text><!--
@startuml spring-ioc AnnotationConfigApplicationContext 启动分析

AnnotationConfigApplicationContext -> AnnotationConfigApplicationContext: new

AnnotationConfigApplicationContext -> AnnotatedBeanDefinitionReader: new

AnnotatedBeanDefinitionReader -> AnnotatedBeanDefinitionReader: registerAnnotationConfigProcessors
note left
这里添加一下 BeanPostProcessor 的扩展
调用的是 AnnotationConfigUtils.registerAnnotationConfigProcessors   
其中重点的内容是
1. ConfigurationClassPostProcessor
2. AutowiredAnnotationBeanPostProcessor
3. RequiredAnnotationBeanPostProcessor
end note

AnnotatedBeanDefinitionReader -> AnnotationConfigApplicationContext: return

AnnotationConfigApplicationContext -> ClassPathBeanDefinitionScanner: new

ClassPathBeanDefinitionScanner -> AnnotationConfigApplicationContext: return

AnnotationConfigApplicationContext -> AnnotatedBeanDefinitionReader: register
note left
这里 register 注册的第一个 BeanDefinition，作为参数
也就是标记了 @Configuration 注解启动配置类
end note

AnnotatedBeanDefinitionReader -> AnnotationConfigApplicationContext: registerBeanDefinition

AnnotationConfigApplicationContext -> AbstractApplicationContext: refresh
note left
refresh 是 spring ioc 容器的启动方法，老复杂了
end note

AbstractApplicationContext -> AbstractApplicationContext: prepareRefresh
note left: 准备启动阶段，记录启动时间，准备 properties 和 验证

AbstractApplicationContext -> AbstractApplicationContext: obtainFreshBeanFactory
note left
ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();
获取 beanFactory  通常是 DefaultListableBeanFactory 实例，在 注解配置 和 xml 配置中的实现稍微有些不同
不同总的来说就是获取一个 DefaultListableBeanFactory
注解里面还是直接返回，xml里面销毁里面的 bean，重新构建的
end note

AbstractApplicationContext -> AbstractApplicationContext: prepareBeanFactory
note left
prepareBeanFactory(beanFactory);
准备阶段，就是对 beanFactory 进行一些配置
1. 设置类加载器
2. 设置beanFactory的表达式语言处理器
3. 为beanFactory增加了一个默认的propertyEditor
4. 添加一个 ApplicationContextAwareProcessor 这是一个 BeaPostProcessor 实现用来实现一些 Aware 接口
5. 添加忽略依赖的接口，就是 ApplicationContextAwareProcessor 里面处理的接口
6. 这里添加处理依赖时候的映射 也就是如果应用依赖了譬如 BeanFactory，ApplicationContext 等接口，都是同一个实例（本实例） 

end note

AbstractApplicationContext -> AbstractApplicationContext: postProcessBeanFactory
note left: 准备完毕后的一个方法，子类可以对 beanFactory 继续做一些修改，本类中是一个空方法

AbstractApplicationContext -> AbstractApplicationContext: invokeBeanFactoryPostProcessors
note left
这是一个重要的地方，对应扩展接口为 BeanFactoryPostProcessor 以及子接口 BeanDefinitionRegistryPostProcessor
BeanFactoryPostProcessor 接口是可以针对 beanFactory 做一些修改，譬如添加一些 bean，设置 beanFactory 属性
BeanDefinitionRegistryPostProcessor 接口只是方法参数为 BeanDefinitionRegistry，可以再添加一些 BeanDefinition
这个接口是一个重要的扩展接口，spring 内部 或者外部都可以通过这个接口的实现来扩展
可以通过 ApplicationContext 的 addBeanFactoryPostProcessor 方法添加，或者注册 Bean，spring 就可以感知到，进行触发
发生顺序很重要，先调用通过 applicationContext.add 添加的，然后调用 BeanDefinition 容器里面的
spring 内部的第一个调用的容器中的定义就是 ConfigurationClassPostProcessor，这个用了根据 配置类来找各个地方的 BeanDefinition ，注册到 容器中
无论xml配置还是注解配置，通常有一个入口配置（springboot 中通常就是 Application），然后根据这个配置类，找到其他的配置类，根据所有配置类（找到一个解析一个）找到定义的 bean
end note


AbstractApplicationContext -> AbstractApplicationContext: registerBeanPostProcessors
note left
经过上一步调用后，所有的 BeanDefinition 都已经找到并且注册到容器中类
这一步就是找到容器中实现 BeanPostProcessor 的 BeanDefinition，然后添加到 beanFactory 中
BeanPostProcessor 这个也是一个非常重要的扩展接口，譬如spring内部各种 Aware 接口，就是有 这个接口的实现类扩展出来的
aop 也是这一系列子接口实现的扩展
end note

AbstractApplicationContext -> AbstractApplicationContext: initMessageSource
note left
初始化 MessageSource 接口，如果没有，就使用默认的，注册到容器里面
end note

AbstractApplicationContext -> AbstractApplicationContext: initApplicationEventMulticaster
note left
初始化 ApplicationEventMulticaster 接口，如果没有，就使用默认的，注册到容器里面
end note

AbstractApplicationContext -> AbstractApplicationContext: onRefresh
note left
这是一个空方法，子类可以实现，可以在 bean 容器里面添加一些东西
end note

AbstractApplicationContext -> AbstractApplicationContext: registerListeners
note left
这里是注册 ApplicationListener ，一些是通过 beanFactory 注册的，一些是用户自定义的 Bean ，然后发布 early 事件
end note

AbstractApplicationContext -> AbstractApplicationContext: finishBeanFactoryInitialization
note left
这个方法里面将实例化所有非延时加载的单例 bean
实例化就是调用 getBean 方法
这里将触发 BeanPostProcessor
end note

AbstractApplicationContext -> AbstractApplicationContext: finishRefresh
note left
清空 resource缓存，注册生命周期处理bean，然后获取所有 周期接口的实现启动，发布启动事件，注册到 JMX
end note

alt if exception

AbstractApplicationContext -> AbstractApplicationContext: destroyBeans
note left: 如果启动出现异常，就销毁所有已经创建的实例

AbstractApplicationContext -> AbstractApplicationContext: cancelRefresh
note left: 取消refresh
end

AbstractApplicationContext -> AbstractApplicationContext: resetCommonCaches
note left: 最后一步，清空所有缓存

AbstractApplicationContext -> AnnotationConfigApplicationContext: end
@enduml

PlantUML version 1.2018.03(Fri Apr 06 00:59:15 CST 2018)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 10+46
Operating System: Windows 10
OS Version: 10.0
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>