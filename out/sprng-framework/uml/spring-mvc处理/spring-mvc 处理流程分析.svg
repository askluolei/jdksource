<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1713px" preserveAspectRatio="none" style="width:2117px;height:1713px;" version="1.1" viewBox="0 0 2117 1713" width="2117px" zoomAndPan="magnify"><defs><filter height="300%" id="f19riuzytihqsm" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="672" x2="672" y1="41.1201" y2="1670.3662"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="854" x2="854" y1="41.1201" y2="1670.3662"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="1037" x2="1037" y1="41.1201" y2="1670.3662"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="1267" x2="1267" y1="41.1201" y2="1670.3662"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="1498" x2="1498" y1="41.1201" y2="1670.3662"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="1704" x2="1704" y1="41.1201" y2="1670.3662"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="1955" x2="1955" y1="41.1201" y2="1670.3662"/><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="128" x="606" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="114" x="613" y="26.0439">FrameworkServlet</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="128" x="606" y="1669.3662"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="114" x="613" y="1692.4102">FrameworkServlet</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="126" x="789" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="112" x="796" y="26.0439">DispatcherServlet</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="126" x="789" y="1669.3662"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="112" x="796" y="1692.4102">DispatcherServlet</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="212" x="929" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="198" x="936" y="26.0439">AbstractHandlerMethodAdapter</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="212" x="929" y="1669.3662"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="198" x="936" y="1692.4102">AbstractHandlerMethodAdapter</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="220" x="1155" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="206" x="1162" y="26.0439">RequestMappingHandlerAdapter</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="220" x="1155" y="1669.3662"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="206" x="1162" y="1692.4102">RequestMappingHandlerAdapter</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="214" x="1389" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="200" x="1396" y="26.0439">ServletInvocableHandlerMethod</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="214" x="1389" y="1669.3662"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="200" x="1396" y="1692.4102">ServletInvocableHandlerMethod</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="170" x="1617" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="156" x="1624" y="26.0439">InvocableHandlerMethod</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="170" x="1617" y="1669.3662"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="156" x="1624" y="1692.4102">InvocableHandlerMethod</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="305" x="1801" y="3"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="291" x="1808" y="26.0439">HandlerMethodReturnValueHandlerComposite</text><rect fill="#FEFECE" filter="url(#f19riuzytihqsm)" height="33.1201" style="stroke: #A80036; stroke-width: 1.5;" width="305" x="1801" y="1669.3662"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="291" x="1808" y="1692.4102">HandlerMethodReturnValueHandlerComposite</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="672" x2="714" y1="82.2517" y2="82.2517"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="714" x2="714" y1="82.2517" y2="95.2517"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="673" x2="714" y1="95.2517" y2="95.2517"/><polygon fill="#A80036" points="683,91.2517,673,95.2517,683,99.2517,679,95.2517" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="94" x="679" y="77.3953">processRequest</text><path d="M403,56.1201 L403,101.1201 L663,101.1201 L663,66.1201 L653,56.1201 L403,56.1201 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M653,56.1201 L653,66.1201 L663,66.1201 L653,56.1201 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="409" y="76.0181">请求入口</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="239" x="409" y="93.7725">doGet,doPost,doPut 等方法都是进入这里</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="672" x2="714" y1="150.6377" y2="150.6377"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="714" x2="714" y1="150.6377" y2="163.6377"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="673" x2="714" y1="163.6377" y2="163.6377"/><polygon fill="#A80036" points="683,159.6377,673,163.6377,683,167.6377,679,163.6377" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="106" x="679" y="145.7813">initContextHolders</text><path d="M404,115.6289 L404,178.6289 L663,178.6289 L663,125.6289 L653,115.6289 L404,115.6289 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M653,115.6289 L653,125.6289 L663,125.6289 L653,115.6289 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="91" x="410" y="135.5269">设置线程上下文</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="234" x="410" y="153.2813">这个很常用，在本次请求线程的任意地方</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="238" x="410" y="171.0356">可以通过上下文获取 request 和 response</text><polygon fill="#A80036" points="842,212.6465,852,216.6465,842,220.6465,846,216.6465" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="672" x2="848" y1="216.6465" y2="216.6465"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="56" x="679" y="211.79">doService</text><path d="M487,192.8921 L487,219.8921 L663,219.8921 L663,202.8921 L653,192.8921 L487,192.8921 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M653,192.8921 L653,202.8921 L663,202.8921 L653,192.8921 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="155" x="493" y="212.79">调用子类的 doService 方法</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="896" y1="253.4009" y2="253.4009"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="896" x2="896" y1="253.4009" y2="266.4009"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="855" x2="896" y1="266.4009" y2="266.4009"/><polygon fill="#A80036" points="865,262.4009,855,266.4009,865,270.4009,861,266.4009" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="65" x="861" y="248.5444">doDispatch</text><path d="M609,236.1465 L609,263.1465 L845,263.1465 L845,246.1465 L835,236.1465 L609,236.1465 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,236.1465 L835,246.1465 L845,246.1465 L835,236.1465 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="215" x="615" y="256.0444">调用前还有设置一堆 request attribute</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="896" y1="305.5325" y2="305.5325"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="896" x2="896" y1="305.5325" y2="318.5325"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="855" x2="896" y1="318.5325" y2="318.5325"/><polygon fill="#A80036" points="865,314.5325,855,318.5325,865,322.5325,861,318.5325" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="85" x="861" y="300.676">checkMultipart</text><path d="M517,279.4009 L517,324.4009 L845,324.4009 L845,289.4009 L835,279.4009 L517,279.4009 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,279.4009 L835,289.4009 L845,289.4009 L835,279.4009 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="143" x="523" y="299.2988">检查是否为文件上传请求</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="307" x="523" y="317.0532">如果是就把 request 换成 MultipartHttpServletRequest</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="896" y1="444.936" y2="444.936"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="896" x2="896" y1="444.936" y2="457.936"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="855" x2="896" y1="457.936" y2="457.936"/><polygon fill="#A80036" points="865,453.936,855,457.936,865,461.936,861,457.936" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="62" x="861" y="440.0796">getHandler</text><path d="M457,338.9097 L457,543.9097 L845,543.9097 L845,348.9097 L835,338.9097 L457,338.9097 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,338.9097 L835,348.9097 L845,348.9097 L835,338.9097 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="269" x="463" y="358.8076">获取处理类，返回的是 HandlerExecutionChain</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="257" x="463" y="376.562">其实是遍历 HandlerMapping 来看哪个能处理</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="39" x="463" y="394.3164">主要有</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="190" x="463" y="412.0708">RequestMappingHandlerMapping</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="173" x="463" y="429.8252">BeanNameUrlHandlerMapping</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="149" x="463" y="447.5796">SimpleUrlHandlerMapping</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="178" x="463" y="465.334">WelcomePageHandlerMapping</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="467" y="483.0884"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="367" x="463" y="500.8428">其中 RequestMappingHandlerMapping 是大部分业务逻辑使用的</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="271" x="463" y="518.5972">返回的 chain 里面的 handler 是 HandlerMethod</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="228" x="463" y="536.3516">chain 里面包含具体的 handler 和拦截器</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="896" y1="628.7256" y2="628.7256"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="896" x2="896" y1="628.7256" y2="641.7256"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="855" x2="896" y1="641.7256" y2="641.7256"/><polygon fill="#A80036" points="865,637.7256,855,641.7256,865,645.7256,861,641.7256" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="107" x="861" y="623.8691">getHandlerAdapter</text><path d="M8,558.208 L8,692.208 L845,692.208 L845,568.208 L835,558.208 L8,558.208 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,558.208 L835,568.208 L845,568.208 L835,558.208 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="327" x="14" y="578.106">获取适配 调用 handler 的方法之前和之后做一些增强处理</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="257" x="14" y="595.8604">每个 adapter 类型，支持对应的 handler 类型</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="372" x="14" y="613.6147">这里的增强不是指拦截器，是参数和响应处理，也有几种 adapter</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="454" x="14" y="631.3691">1. HttpRequestHandlerAdapter 这个处理 handler 的类型为 HttpRequestHandler</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="488" x="14" y="649.1235">2. SimpleServletHandlerAdapter 这个处理 handler 的类型为 Servlet 调用 service 方法</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="416" x="14" y="666.8779">3. SimpleControllerHandlerAdapter 这个处理 handler 的类型为 Controller</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="812" x="14" y="684.6323">4. RequestMappingHandlerAdapter 这个是大部分逻辑走的地方，上面3个一般是 spring 自己用的，这个处理的 handler 类型是 HandlerMethod</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="896" y1="725.2432" y2="725.2432"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="896" x2="896" y1="725.2432" y2="738.2432"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="855" x2="896" y1="738.2432" y2="738.2432"/><polygon fill="#A80036" points="865,734.2432,855,738.2432,865,742.2432,861,738.2432" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="91" x="861" y="720.3867">applyPreHandle</text><path d="M658,707.9888 L658,734.9888 L845,734.9888 L845,717.9888 L835,707.9888 L658,707.9888 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,707.9888 L835,717.9888 L845,717.9888 L835,707.9888 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="166" x="664" y="727.8867">调用拦截器的方法 preHandle</text><polygon fill="#A80036" points="1025,779.8748,1035,783.8748,1025,787.8748,1029,783.8748" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="1031" y1="783.8748" y2="783.8748"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="861" y="779.0183">handle</text><path d="M415,751.2432 L415,796.2432 L845,796.2432 L845,761.2432 L835,751.2432 L415,751.2432 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,751.2432 L835,761.2432 L845,761.2432 L835,751.2432 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="409" x="421" y="771.1411">调用代理的 handle 方法，我们以 RequestMappingHandlerAdapter 为例</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="251" x="421" y="788.8955">里面会涉及到 参数的处理和响应结果的处理</text><polygon fill="#A80036" points="1255,825.5063,1265,829.5063,1255,833.5063,1259,829.5063" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1037" x2="1261" y1="829.5063" y2="829.5063"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="80" x="1044" y="824.6499">handleInternal</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1267" x2="1309" y1="861.2607" y2="861.2607"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1309" x2="1309" y1="861.2607" y2="874.2607"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1268" x2="1309" y1="874.2607" y2="874.2607"/><polygon fill="#A80036" points="1278,870.2607,1268,874.2607,1278,878.2607,1274,874.2607" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="123" x="1274" y="856.4043">invokeHandlerMethod</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1267" x2="1309" y1="906.0151" y2="906.0151"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1309" x2="1309" y1="906.0151" y2="919.0151"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1268" x2="1309" y1="919.0151" y2="919.0151"/><polygon fill="#A80036" points="1278,915.0151,1268,919.0151,1278,923.0151,1274,919.0151" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="176" x="1274" y="901.1587">createInvocableHandlerMethod</text><path d="M976,888.7607 L976,915.7607 L1258,915.7607 L1258,898.7607 L1248,888.7607 L976,888.7607 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1248,888.7607 L1248,898.7607 L1258,898.7607 L1248,888.7607 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="261" x="982" y="908.6587">获取执行对象 ServletInvocableHandlerMethod</text><polygon fill="#A80036" points="1486,946.7695,1496,950.7695,1486,954.7695,1490,950.7695" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1267" x2="1492" y1="950.7695" y2="950.7695"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="99" x="1274" y="945.9131">invokeAndHandle</text><polygon fill="#A80036" points="1692,978.5239,1702,982.5239,1692,986.5239,1696,982.5239" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1498" x2="1698" y1="982.5239" y2="982.5239"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="103" x="1505" y="977.6675">invokeForRequest</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1704" x2="1746" y1="1039.4099" y2="1039.4099"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1746" x2="1746" y1="1039.4099" y2="1052.4099"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1705" x2="1746" y1="1052.4099" y2="1052.4099"/><polygon fill="#A80036" points="1715,1048.4099,1705,1052.4099,1715,1056.4099,1711,1052.4099" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="157" x="1711" y="1034.5535">getMethodArgumentValues</text><path d="M1201,995.5239 L1201,1076.5239 L1695,1076.5239 L1695,1005.5239 L1685,995.5239 L1201,995.5239 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1685,995.5239 L1685,1005.5239 L1695,1005.5239 L1685,995.5239 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="143" x="1207" y="1015.4219">获取执行方法需要的参数</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="353" x="1207" y="1033.1763">使用的是 HandlerMethodArgumentResolverComposite 处理的</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="473" x="1207" y="1050.9307">这里包含 HandlerMethodArgumentResolver 列表，包括系统的和自定义的参数处理</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="465" x="1207" y="1068.6851">譬如 @RequestBody 等注解，还有 HttpServletRequest 对象，都是在这里处理的</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1704" x2="1746" y1="1109.2959" y2="1109.2959"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1746" x2="1746" y1="1109.2959" y2="1122.2959"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1705" x2="1746" y1="1122.2959" y2="1122.2959"/><polygon fill="#A80036" points="1715,1118.2959,1705,1122.2959,1715,1126.2959,1711,1122.2959" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="1711" y="1104.4395">doInvoke</text><polygon fill="#A80036" points="1509,1163.9275,1499,1167.9275,1509,1171.9275,1505,1167.9275" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1503" x2="1703" y1="1167.9275" y2="1167.9275"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="114" x="1515" y="1163.071">setResponseStatus</text><path d="M1286,1135.2959 L1286,1180.2959 L1489,1180.2959 L1489,1145.2959 L1479,1135.2959 L1286,1135.2959 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1479,1135.2959 L1479,1145.2959 L1489,1145.2959 L1479,1135.2959 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="121" x="1292" y="1155.1938">设置 http 状态和原因</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="182" x="1292" y="1172.9482">注解 @ResponseStatus 的处理</text><polygon fill="#A80036" points="1943.5,1223.4363,1953.5,1227.4363,1943.5,1231.4363,1947.5,1227.4363" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1498" x2="1949.5" y1="1227.4363" y2="1227.4363"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="109" x="1505" y="1222.5798">handleReturnValue</text><path d="M1128,1194.8047 L1128,1239.8047 L1489,1239.8047 L1489,1204.8047 L1479,1194.8047 L1128,1194.8047 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1479,1194.8047 L1479,1204.8047 L1489,1204.8047 L1479,1194.8047 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="340" x="1134" y="1214.7026">这个对象里面包含 HandlerMethodReturnValueHandler 列表</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="248" x="1134" y="1232.457">用来处理返回值的，比如 @ResponseBody</text><polygon fill="#A80036" points="1278,1269.0679,1268,1273.0679,1278,1277.0679,1274,1273.0679" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1272" x2="1703" y1="1273.0679" y2="1273.0679"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="33" x="1284" y="1268.2114">return</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1267" x2="1309" y1="1304.8223" y2="1304.8223"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1309" x2="1309" y1="1304.8223" y2="1317.8223"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1268" x2="1309" y1="1317.8223" y2="1317.8223"/><polygon fill="#A80036" points="1278,1313.8223,1268,1317.8223,1278,1321.8223,1274,1317.8223" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="104" x="1274" y="1299.9658">getModelAndView</text><path d="M793,1287.5679 L793,1314.5679 L1258,1314.5679 L1258,1297.5679 L1248,1287.5679 L793,1287.5679 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1248,1287.5679 L1248,1297.5679 L1258,1297.5679 L1248,1287.5679 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="444" x="799" y="1307.4658">如果不是视图，那这里返回的就是 null 了，在响应处理那里实际就已经处理了</text><polygon fill="#A80036" points="865,1345.5767,855,1349.5767,865,1353.5767,861,1349.5767" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="859" x2="1266" y1="1349.5767" y2="1349.5767"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="33" x="871" y="1344.7202">return</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="896" y1="1381.3311" y2="1381.3311"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="896" x2="896" y1="1381.3311" y2="1394.3311"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="855" x2="896" y1="1394.3311" y2="1394.3311"/><polygon fill="#A80036" points="865,1390.3311,855,1394.3311,865,1398.3311,861,1394.3311" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="133" x="861" y="1376.4746">applyDefaultViewName</text><path d="M668,1364.0767 L668,1391.0767 L845,1391.0767 L845,1374.0767 L835,1364.0767 L668,1364.0767 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,1364.0767 L835,1374.0767 L845,1374.0767 L835,1364.0767 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="156" x="674" y="1383.9746">不返回视图，这里啥都不做</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="896" y1="1426.0854" y2="1426.0854"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="896" x2="896" y1="1426.0854" y2="1439.0854"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="855" x2="896" y1="1439.0854" y2="1439.0854"/><polygon fill="#A80036" points="865,1435.0854,855,1439.0854,865,1443.0854,861,1439.0854" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="98" x="861" y="1421.229">applyPostHandle</text><path d="M660,1408.8311 L660,1435.8311 L845,1435.8311 L845,1418.8311 L835,1408.8311 L660,1408.8311 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,1408.8311 L835,1418.8311 L845,1418.8311 L835,1408.8311 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="164" x="666" y="1428.729">调用拦截器 postHandle 方法</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="854" x2="896" y1="1478.217" y2="1478.217"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="896" x2="896" y1="1478.217" y2="1491.217"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="855" x2="896" y1="1491.217" y2="1491.217"/><polygon fill="#A80036" points="865,1487.217,855,1491.217,865,1495.217,861,1491.217" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="134" x="861" y="1473.3606">processDispatchResult</text><path d="M596,1452.0854 L596,1497.0854 L845,1497.0854 L845,1462.0854 L835,1452.0854 L596,1452.0854 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M835,1452.0854 L835,1462.0854 L845,1462.0854 L835,1452.0854 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="208" x="602" y="1471.9834">如果不返回视图，跳过视图处理逻辑</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="228" x="602" y="1489.7378">这里触发拦截器的 afterCompletion 方法</text><polygon fill="#A80036" points="683,1526.3486,673,1530.3486,683,1534.3486,679,1530.3486" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="677" x2="853" y1="1530.3486" y2="1530.3486"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="33" x="689" y="1525.4922">return</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="672" x2="714" y1="1562.103" y2="1562.103"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="714" x2="714" y1="1562.103" y2="1575.103"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="673" x2="714" y1="1575.103" y2="1575.103"/><polygon fill="#A80036" points="683,1571.103,673,1575.103,683,1579.103,679,1575.103" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="118" x="679" y="1557.2466">resetContextHolders</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="672" x2="714" y1="1623.1118" y2="1623.1118"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="714" x2="714" y1="1623.1118" y2="1636.1118"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="673" x2="714" y1="1636.1118" y2="1636.1118"/><polygon fill="#A80036" points="683,1632.1118,673,1636.1118,683,1640.1118,679,1636.1118" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="168" x="679" y="1618.2554">publishRequestHandledEvent</text><path d="M193,1588.103 L193,1651.103 L663,1651.103 L663,1598.103 L653,1588.103 L193,1588.103 " fill="#FBFB77" filter="url(#f19riuzytihqsm)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M653,1588.103 L653,1598.103 L663,1598.103 L653,1588.103 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="356" x="199" y="1608.001">方法处理完成，会触发一个 ServletRequestHandledEvent 事件</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="445" x="199" y="1625.7554">通过事件监听 implements ApplicationListener&lt;ServletRequestHandledEvent&gt;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="104" x="199" y="1643.5098">可以消费这个事件</text><!--
@startuml spring-mvc 处理流程分析

FrameworkServlet -> FrameworkServlet: processRequest
note left
请求入口
doGet,doPost,doPut 等方法都是进入这里
end note

FrameworkServlet -> FrameworkServlet: initContextHolders
note left
设置线程上下文
这个很常用，在本次请求线程的任意地方
可以通过上下文获取 request 和 response
end note

FrameworkServlet -> DispatcherServlet: doService
note left
调用子类的 doService 方法
end note

DispatcherServlet -> DispatcherServlet: doDispatch
note left
调用前还有设置一堆 request attribute
end note

DispatcherServlet -> DispatcherServlet: checkMultipart
note left
检查是否为文件上传请求
如果是就把 request 换成 MultipartHttpServletRequest
end note

DispatcherServlet -> DispatcherServlet: getHandler
note left
获取处理类，返回的是 HandlerExecutionChain 
其实是遍历 HandlerMapping 来看哪个能处理
主要有 
RequestMappingHandlerMapping
BeanNameUrlHandlerMapping
SimpleUrlHandlerMapping
WelcomePageHandlerMapping

其中 RequestMappingHandlerMapping 是大部分业务逻辑使用的
返回的 chain 里面的 handler 是 HandlerMethod 
chain 里面包含具体的 handler 和拦截器
end note

DispatcherServlet -> DispatcherServlet: getHandlerAdapter
note left
获取适配 调用 handler 的方法之前和之后做一些增强处理
每个 adapter 类型，支持对应的 handler 类型
这里的增强不是指拦截器，是参数和响应处理，也有几种 adapter
1. HttpRequestHandlerAdapter 这个处理 handler 的类型为 HttpRequestHandler 
2. SimpleServletHandlerAdapter 这个处理 handler 的类型为 Servlet 调用 service 方法
3. SimpleControllerHandlerAdapter 这个处理 handler 的类型为 Controller 
4. RequestMappingHandlerAdapter 这个是大部分逻辑走的地方，上面3个一般是 spring 自己用的，这个处理的 handler 类型是 HandlerMethod 
end note

DispatcherServlet -> DispatcherServlet: applyPreHandle
note left
调用拦截器的方法 preHandle
end note

DispatcherServlet -> AbstractHandlerMethodAdapter: handle
note left
调用代理的 handle 方法，我们以 RequestMappingHandlerAdapter 为例
里面会涉及到 参数的处理和响应结果的处理
end note

AbstractHandlerMethodAdapter -> RequestMappingHandlerAdapter: handleInternal

RequestMappingHandlerAdapter -> RequestMappingHandlerAdapter: invokeHandlerMethod

RequestMappingHandlerAdapter -> RequestMappingHandlerAdapter: createInvocableHandlerMethod
note left
获取执行对象 ServletInvocableHandlerMethod
end note

RequestMappingHandlerAdapter -> ServletInvocableHandlerMethod: invokeAndHandle

ServletInvocableHandlerMethod -> InvocableHandlerMethod: invokeForRequest

InvocableHandlerMethod -> InvocableHandlerMethod: getMethodArgumentValues
note left
获取执行方法需要的参数
使用的是 HandlerMethodArgumentResolverComposite 处理的
这里包含 HandlerMethodArgumentResolver 列表，包括系统的和自定义的参数处理
譬如 @RequestBody 等注解，还有 HttpServletRequest 对象，都是在这里处理的
end note

InvocableHandlerMethod -> InvocableHandlerMethod: doInvoke

InvocableHandlerMethod -> ServletInvocableHandlerMethod: setResponseStatus
note left
设置 http 状态和原因
注解 @ResponseStatus 的处理
end note

ServletInvocableHandlerMethod -> HandlerMethodReturnValueHandlerComposite: handleReturnValue
note left
这个对象里面包含 HandlerMethodReturnValueHandler 列表
用来处理返回值的，比如 @ResponseBody
end note

InvocableHandlerMethod -> RequestMappingHandlerAdapter: return

RequestMappingHandlerAdapter -> RequestMappingHandlerAdapter: getModelAndView
note left
如果不是视图，那这里返回的就是 null 了，在响应处理那里实际就已经处理了
end note

RequestMappingHandlerAdapter -> DispatcherServlet: return

DispatcherServlet -> DispatcherServlet: applyDefaultViewName
note left
不返回视图，这里啥都不做
end note

DispatcherServlet -> DispatcherServlet: applyPostHandle
note left
调用拦截器 postHandle 方法
end note

DispatcherServlet -> DispatcherServlet: processDispatchResult
note left
如果不返回视图，跳过视图处理逻辑
这里触发拦截器的 afterCompletion 方法
end note

DispatcherServlet -> FrameworkServlet: return

FrameworkServlet -> FrameworkServlet: resetContextHolders

FrameworkServlet -> FrameworkServlet: publishRequestHandledEvent
note left
方法处理完成，会触发一个 ServletRequestHandledEvent 事件
通过事件监听 implements ApplicationListener<ServletRequestHandledEvent> 
可以消费这个事件
end note
@enduml

PlantUML version 1.2018.03(Fri Apr 06 00:59:15 CST 2018)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 10+46
Operating System: Windows 10
OS Version: 10.0
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>